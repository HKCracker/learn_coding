# 凡是可作用于for循环的对象都是Iterable类型；

# 凡是可作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列；

# 集合数据类型如list、dict、str等是Iterable但不是Iterator，不过可以通过iter()函数获得一个Iterator对象。

# Python的for循环本质上就是通过不断调用next()函数实现的，例如
# 生成器是迭代器的一种。所有实现了__next__()方法的对象都是迭代器。生成器本质上也是实现了该方法，不过是通过简单的方法实现：函数中加yield关键字+使用类似列表生成式方式。这两种方式创建出来的函数或者式子都是生成器，本质上也是迭代器。迭代器比较繁琐的制造方式是创建一个对象，并在对象中实现一个方法：__next__()。实现之后，就可以反复调用next()方法返回值。#生成器当然也可以调用next()方法。所以生成器和迭代器都可以调用next()方法来获取下一个返回值。这也是生成器和迭代器本质是一样的原因。不同点在于，生成器书写起来简单明了，比通过创建一个对象并重写__next__()方便多了